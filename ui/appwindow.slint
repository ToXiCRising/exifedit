import { Button, VerticalBox, HorizontalBox, StandardListView, ScrollView, LineEdit } from "std-widgets.slint";
import {Palette} from "palette.slint";

component ImageViewer inherits Rectangle{
    in property <image> image;
            
    width: 512px;
    height: 512px;
    background: Palette.bg1;
    border-radius: 7px;

    Image {
        source: image;
        image-fit: contain;
        width: parent.width * 0.95;
        height: parent.height * 0.95;
    }
}

component CarouselTile inherits Rectangle {

    in property <bool> selected;
    in property <image> preview_smol;
    in property <string> image_name;
    in-out property <int> id;
    
    background: Palette.bg1;
    border-radius: 7px;
    height: 128px;
    

    TouchArea {
        clicked => {Logic.clickedCarouselTile(id)}
        
        VerticalLayout {
            spacing: 2px;

            Rectangle {
                width: parent.width;
                height: 115px;
                Image {
                    source: preview_smol;
                    image-fit: contain;
                    width: parent.width;
                    height: parent.height;
                }
            }
            
            Rectangle {
                width: parent.width;
                height: 16px;
                border-radius: 7px;
                //border-color: selected ? Palette.bg2 : Palette.bg3;
                background: Palette.bg2;

                Rectangle {
                    width: parent.width;
                    height: 8px;
                    y: 0px;
                    background: parent.background;
                }
    
                Text {
                    horizontal-alignment: center;
                    text: image_name;
                }
            }   
        }
        Selection_Indicator := Rectangle {
            height: selected ? 0px : 0.65*parent.height;
            animate height {
                 duration: 75ms;
            }
            width: 4px;
            x: -2px;

            background: selected ? Palette.bg1 : Palette.blue;
            animate background {
                 duration: 75ms;
                 easing: ease-in-out;
            }
            border-radius: 2px;
        }
    }   
}

component ExifTile inherits Rectangle {

    in property <string> field_name;
    in-out property <string> set_text;
    in property <int> tile_id;
    in property <bool> has_focus;


    Rectangle {
        width: parent.width;
        height: 100px;
        border-radius: 7px;
        background: Palette.bg1;    

        VerticalLayout {
            padding-top: 12px;
            Text {
                font-weight: 700;
                font-size: 16px;
                horizontal-alignment: center;
                text: field_name;
            }
            Text {
                font-weight: 400;
                font-size: 14px;
                horizontal-alignment: center;
                color: Palette.text-light;
                text: set_text;
            }
            LineEdit {
                horizontal-alignment: center;
                font-size: 16px;
                accepted => {Logic.updatedExifField(tile_id, self.text); self.text = ""} 
            
            }
        } 
    }
}

export component AppWindow inherits Window {

    callback openFileSelector;
    callback writeExifData;
    callback keyPressed(KeyEvent);
    forward-focus: key-handler;

    in property <image> icon_;

    in property <image> preview_image;
    in property <string> current_image_exif;

    in property <[string]> carousel_image_names;
    in property <[image]> carousel_images;
    in property <int> carousel_viewport_height;
    in property <int> carousel_cur_selected;

    //in property <string> exif_camera;
    //in property <string> exif_lens;
    //in property <string> exif_focal_length;
    //in property <string> exif_iso;
    //in property <string> exif_aperture;
    //in property <string> exif_shutter_speed;

    in property <[string]> exif_tiles;
    in property <[string]> exif_defaults;
    in property <int> exif_selected;
    in property <int> exif_viewport_height;

    icon: icon_;
    title: "ExifEdit";
    background: Palette.bg0;

    key-handler := FocusScope {
        key-pressed(event) => {
            keyPressed(event);
            accept;
        }
        
        HorizontalBox {

            Carousel := VerticalBox {
                width: 256px;
                Button {
                    height: 32px;

                    text: "Open File Selector";
                    clicked => {root.openFileSelector();}
                }

                ScrollView {
                    viewport-width: parent.width * 0.9;
                    viewport-height: carousel_viewport_height * 1px;
                    for img_name[i] in carousel_image_names: CarouselTile {
                        image_name: img_name;
                        preview_smol: carousel_images[i];
                        id: i;
                        y: 150px * i;
                        selected: carousel_cur_selected == self.id ? false : true;
                    }
                }
            }

            ImagePreview := VerticalBox {   
                ImageViewer {
                    image: preview_image;
                }
                Text {
                    text: current_image_exif;
                }
            }

            ExifTiles := VerticalBox {
                width: 256px;
                Button {
                    height: 32px;

                    text: "Write EXIF Data";
                    clicked => {root.writeExifData();}
                }

                ScrollView {
                    viewport-width: parent.width * 0.9;
                    viewport-height: exif_viewport_height * 1px;
                    property <int> spacing: 120;

                    for exif_tile_name[i] in exif_tiles: ExifTile {
                        field_name: exif_tile_name;
                        set_text: exif_defaults[i];
                        tile_id: i;
                        //wierd, handtuned offset is wierd
                        y: (i * spacing - 300) * 1px;
                    }
                }  
            }
        }
    }  
}

export global Logic {
    callback clickedCarouselTile(int);
    callback updatedExifField(int, string);
}
